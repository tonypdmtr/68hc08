#ifmain ;-----------------------------------------------------------------------
                    #ListOff
                    #Uses     mcu.inc
                    #ListOn
#endif ;------------------------------------------------------------------------
                    #Uses     upcase.sub

;*******************************************************************************
; Purpose: Compare ASCIZ strings pointed by HX and TOS (case insensitive)
; Input  : HX -> first ASCIZ string
;        : TOS -> second ASCIZ string
; Output : N Z V C set or cleared in accordance with the CMP instruction
;        : Allows BEQ, BNE, BLO, BHS, etc. to be used on result just as if
;        : a regular CMPA instruction had been used.
; Note(s): All registers except N Z V C flags are preserved
;        : Violates Carry-Set on error rule.  Carry set is used for result (BLO, etc.)
;        : Stacked pointer not destroyed

StringCompare       macro     [#]ASCIZ_String1 [#]ASCIZ_String2
                    mset      #' '
                    mreq      1,2:[#]ASCIZ_String1 [#]ASCIZ_String2
                    #push
                    #spauto   :sp
                    pshhx
                    #psp
                    @@lea     ~2~
                    pshhx
                    @@_ldhx_  ~1~ 1,psp
                    call      ~0~
                    ais       #:psp
                    pulhx
                    #pull
                    endm
;-------------------------------------------------------------------------------
                    #spauto   :ab

StringCompareCase   proc
                    clc                           ;case-sensitive
                    bra       ?StringCompare

;*******************************************************************************
; Purpose: Compare ASCIZ strings pointed by HX and TOS (case sensitive)
; Input  : HX -> first ASCIZ string
;        : TOS -> second ASCIZ string
; Output : N Z V C set or cleared in accordance with the CMP instruction
;        : Allows BEQ, BNE, BLO, BHS, etc. to be used on result just as if
;        : a regular CMPA instruction had been used.
; Note(s): All registers except N Z V C flags are preserved
;        : Violates Carry-Set on error rule.  Carry set is used for result (BLO, etc.)
;        : Stacked pointer not destroyed

StringCompareCase   macro     [#]ASCIZ_String1 [#]ASCIZ_String2
                    mset      #' '
                    mreq      1,2:[#]ASCIZ_String1 [#]ASCIZ_String2
                    #push
                    #spauto   :sp
                    pshhx
                    #psp
                    @@lea     ~2~
                    pshhx
                    @@_ldhx_  ~1~ 1,psp
                    call      ~0~
                    ais       #:psp
                    pulhx
                    #pull
                    endm
;-------------------------------------------------------------------------------
                    #spauto   :ab

StringCompare       proc
                    sec                           ;case-insensitive
;                   bra       ?StringCompare

;*******************************************************************************

                    #spauto   :ab

?StringCompare      proc
.str2@@             equ       1
                    push
                    #ais

                    tpa                           ;shorter PSHCC (A need not be preserved)
                    psha      ccr@@
                    and       #CMP_NOT_AFFECTED_  ;mask off our CCR result bits
                    psha      ans@@               ;will combine with result CCR
                    pshhx     .str1@@             ;create work copy of str1 pointer
          #ifhcs
                    ldhx      .str2@@,sp
                    pshhx     .str2@@             ;create work copy of str2 pointer
          #else
                    tsx
                    lda       .str2@@+1,spx
                    psha
                    lda       .str2@@,spx
                    psha      .str2@@,2           ;create work copy of str2 pointer
          #endif
          ;--------------------------------------
                    #psp
          ;--------------------------------------
Loop@@              @GetNextA .str1@@,sp          ;get char from 1st string
                    psha      a@@                 ;save char from 1st string

                    @GetNextA .str2@@,sp          ;get char from 2nd string
                    psha      b@@                 ;save char from 2nd string
          ;-------------------------------------- ;decide if case comparison
                    tsx
                    lda       ccr@@,spx
                    tap
                    bcc       Compare@@
          ;-------------------------------------- ;case-insensitive case (convert both to uppercase for comparison)
                    lda       a@@,spx
                    call      Upcase              ;convert to uppercase
                    sta       a@@,spx

                    lda       b@@,spx
                    call      Upcase              ;convert to uppercase
                    sta       b@@,spx
          ;-------------------------------------- ;comparison for either case
Compare@@           lda       a@@,spx             ;compare chars from both strings
                    cmpa      b@@,spx             ;(in this order: a cmp b)

                    ais       #:psp               ;balance stack
                    bne       Done@@              ;if different, get out

                    cbeqa     #0,Done@@           ;on terminator, we're done
                    bra       Loop@@
          ;---------------------------------------------------------------------
          ; CMP affected flags always in correct state when coming here
          ;---------------------------------------------------------------------
Done@@              tpa                           ;A = actual CMP result [CCR]
                    and       #CMP_AFFECTED_      ;mask off unused CCR flags
                    ora       ans@@,spx           ;combine with our CCR result bits
                    tap                           ;set return CCR
          ;--------------------------------------
                    ais       #:ais
                    pull
                    rtc

;*******************************************************************************
                    #sp
;*******************************************************************************
