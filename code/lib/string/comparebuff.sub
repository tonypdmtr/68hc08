#ifmain ;-----------------------------------------------------------------------
                    #ListOff
                    #Uses     mcu.inc
                    #ListOn
#endif ;------------------------------------------------------------------------
                    #Uses     upcase.sub

;*******************************************************************************
; Purpose: Compare buffers pointed to by HX and TOS (case sensitive)
; Input  : A = maximum number of bytes to compare
;        : HX -> start of first memory
;        : TOS -> start of second memory
; Output : N Z V C set or cleared in accordance with the CMP instruction
;        : Allows BEQ, BNE, BLO, BHS, etc. to be used on result just as if
;        : a regular CMPA instruction had been used.
; Note(s): All registers except N Z V C flags are preserved
;        : Violates Carry-Set on error rule.  Carry set is used for result (BLO, etc.)
;        : Stacked pointer not destroyed

StringCompareBuff   macro     [#]Buffer1 [#]Buffer2 [#]ByteSize
                    mset      #' '
                    mreq      1,2,3:[#]Buffer1 [#]Buffer2 [#]ByteSize
                    #push
                    #spauto   :sp
                    push
                    #psp
                    lda       ~3~
                    @@lea     ~2~
                    pshhx
                    @@_ldhx_  ~1~ 1,psp
                    call      ~0~
                    ais       #:psp
                    pull
                    #pull
                    endm

;-------------------------------------------------------------------------------

StringCompBuff      macro     [#]Buffer1 [#]Buffer2 [#]ByteSize
                    mset      #' '
                    mreq      1,2,3:[#]Buffer1 [#]Buffer2 [#]ByteSize
                    #push
                    #spauto   :sp
                    push
                    #psp
                    lda       ~3~
                    @@lea     ~2~
                    pshhx
                    @@_ldhx_  ~1~ 1,psp
                    call      ~0~
                    ais       #:psp
                    pull
                    #pull
                    endm

;-------------------------------------------------------------------------------

                    #spauto   :ab

StringCompBuff      proc
                    sec                           ;case-insensitive
                    bra       ?StringCompareBuff

;*******************************************************************************

                    #spauto   :ab

StringCompareBuff   proc
                    clc                           ;case-sensitive (original)
;                   bra       ?StringCompareBuff

;*******************************************************************************

?StringCompareBuff  proc
.str2@@             equ       1
                    psha      max_size@@
                    pshhx     .str1@@
                    tpa
                    psha      ccr@@               ;shorter PSHCC sequence
                    #ais
          #ifhcs
                    ldhx      .str2@@,sp
                    pshhx     .str2@@
                    ldhx      .str1@@,sp
          #else
                    tsx
                    lda       .str2@@+1,spx
                    psha
                    lda       .str2@@,spx
                    psha      .str2@@,2

                    lda       .str1@@,spx
                    ldx       .str1@@+1,spx
                    tah
          #endif
                    lda       max_size@@,sp
                    beq       Done@@              ;zero length always OK

Loop@@              push                          ;save length & pointer to 1st memory

                    lda       ccr@@,sp
                    tap
                    bcs       NoCase@@
          ;-------------------------------------- ;case-sensitive case (original)
                    lda       ,x                  ;get character at HX
          #ifhcs
                    ldhx      .str2@@,sp
          #else
                    ldx       .str2@@,sp
                    txh
                    ldx       .str2@@+1,sp
          #endif
                    cmpa      ,x                  ;is the same as the one at .str2@@,sp?
                    bra       Cont@@
          ;-------------------------------------- ;case-insensitive case
NoCase@@            psha      target@@            ;placeholder for target char later

                    lda       ,x                  ;get character at HX
                    call      Upcase
                    psha      source@@
          #ifhcs
                    ldhx      .str2@@,sp
          #else
                    tsx
                    lda       .str2@@,spx
                    ldx       .str2@@+1,spx
                    tah
          #endif
                    lda       ,x
                    call      Upcase
                    tsx
                    sta       target@@,spx

                    lda       source@@,spx
                    cmpa      target@@,spx        ;is the same as the one at .str2@@,sp?

                    pula:2
          ;--------------------------------------
Cont@@              pull                          ;restore pointer to 1st memory & length
                    bne       Done@@              ;Not same, get out with result

                    dbnza     NextChar@@          ;repeat for all characters
                    bra       Done@@

NextChar@@          aix       #1                  ;No, let's go check next ones
                    @inc.s    .str2@@,sp Loop@@   ;increment target pointer
                    bra       Loop@@
          ;---------------------------------------------------------------------
          ; Z flag always in correct state when coming to Done@@
          ;---------------------------------------------------------------------
Done@@              ais       #:ais

                    tpa                           ;A = actual CMP result [CCR]
                    and       #CCR_V_|CCR_N_|CCR_Z_|CCR_C_ ;mask off unused CCR flags

                    psha
                    tsx
                    lda       ccr@@,spx           ;A = caller's CCR
                    and       #CCR_V_|CCR_N_|CCR_Z_|CCR_C_^NOT ;mask off our CCR result bits
                    ora       {::},spx            ;combine with our CCR result bits
                    sta       ccr@@,spx           ;save it for the caller
                    pula                          ;(WAS: ais #:psp)

                    pula                          ;shorter PULCC (since RegA
                    tap                           ;will be restored by PULL)
                    pull
                    rtc

;*******************************************************************************
                    #sp
;*******************************************************************************
