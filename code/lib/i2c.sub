;*******************************************************************************
;* Module    : I2C.SUB
;* Programmer: Tony Papadimitriou <tonyp@acm.org>
;* Purpose   : Generic I2C routines: I2C_Start, I2C_GetChar, I2C_PutChar, I2C_Stop
;* Language  : Motorola/Freescale/NXP HC08/9S08 Assembly Language (aspisys.com/ASM8)
;* Status    : Copyright (c) 2019 by Tony Papadimitriou <tonyp@acm.org>
;* Note(s)   : Normal sequence is: I2C_Start, I2C_PutChar ..., I2C_Stop
;* History   : 14.08.01 v1.00 Original (taken from 2005.08.01 os8/i2c.mod)
;*           : 14.08.12       Complete rewrite for greater protocol conformance [-3 bytes]
;*           :                Added ?PutAck and ?GetAck; added slave busy
;*           :                detection; added optional clock delay; corrected
;*           :                acknowledge for master-receive case
;*           :                Made ?PutAck and ?GetAck inline [-6 bytes]
;*           : 18.05.08 v1.01 Changed BSR to JSR in ?ClkHigh and ?ClkLow macros
;*           :                Added optional delay after clock low for symmetry
;*           : 18.11.22 v1.02 Added I2C_Init for general API compatibility
;*           : 18.11.23       Added I2C_RepeatedStart as an alias to I2C_Start
;*           :                BugFix: Set CLK high in I2C_Start
;*           :                BugFix: Remove wait for CLK high in ?ClkHigh
;*           : 19.04.11       Changed JSR to BSR in ?ClkLow macro [-5 bytes]
;*           :                I2C_GetChar leaves CCR[C] low for multiple calling convenience [+1 byte]
;*           : 19.04.13       Replaced all I2C_DATA and I2C_CLK manipulations with
;*           :                corresponding procs to emulate an open-drain behavior.
;*           :                Added ?ClkHighSync proc to recognize clock stretching [+9 bytes]
;*           :                Replaced conditional I2C_ClockDelay macro call with simpler macro call
;*           :                BugFix: Added some missing optional delays after ?ClkLow for symmetry
;*           : 19.04.14       BugFix: Added a couple of missing delays in I2C_Start and I2C_Stop procs
;*           :                Replaced some BSR with !JSR for MMU mode compatibility
;*           : 19.04.16       Removed pullups as there are always going to be external ones in place
;*******************************************************************************

;-------------------------------------------------------------------------------
; API
;-------------------------------------------------------------------------------
; I2C_Init          -- (stub for compatibility)
; I2C_Start         -- Generate START condition
; I2C_RepeatedStart -- Generate repeated START condition (same as I2C_Start in this library)
; I2C_Stop          -- Generate STOP condition
; I2C_PutChar       -- Write RegA character to the SCI
; I2C_GetChar       -- Read SCI char into RegA
;-------------------------------------------------------------------------------

                    #Exit     _I2C_
_I2C_               equ       102

#ifmain ;-----------------------------------------------------------------------
                    #ListOff
                    #Uses     mcu.inc
                    #ListOn
                    #MCF

I2C_CLK             @pin      PORTA,3
I2C_DATA            @pin      PORTA,5
#endif ;------------------------------------------------------------------------

                    @CheckPin I2C_CLK,I2C_DATA

                    #Message  I2C: P{I2C_CLK}.{I2C_CLK.}=Clock, P{I2C_DATA}.{I2C_DATA.}=Data

;*******************************************************************************
; Macros
;*******************************************************************************

?delay              macro
          #ifmdef I2C_ClockDelay
                    @I2C_ClockDelay               ;optional extra delay
          #endif
                    endm

;*******************************************************************************
?_OBJECT_?
;*******************************************************************************
; Purpose: Initialize I2C and send the START condition to the I2C device
; Input  : None
; Output : None
; Note(s): START condition requires both the clock and data lines to be
;        : initially high, and with the clock remaining high, the data line to
;        : go low.
                    #spauto

I2C_Start           proc
                    @Input    I2C_CLK,I2C_DATA    ;both lines start high
                    @?delay                       ;time before new transmission is >1.3 usec
;                   bra       I2C_RepeatedStart

;*******************************************************************************

                    #spauto

I2C_RepeatedStart   proc
                    !jsr      ?DataHigh           ;set data-line high
                    @?delay                       ;optional extra delay (is it needed?)
                    !jsr      ?ClkHigh            ;clock-line to '1'
                    @?delay                       ;optional extra delay
                    !jsr      ?DataLow            ;data line goes from high to low
                    @?delay                       ;optional extra delay
          ;-------------------------------------- ;get ready for first transfer
                    !jsr      ?ClkLow             ;clock starts low for data transfers
                    @?delay                       ;optional extra delay
                    rtc

;*******************************************************************************
; Purpose: Send the STOP condition to the I2C device
; Input  : None
; Output : None
; Note(s): STOP condition requires the clock line to be initially high and the
;        : data line to be initially low, and with the clock remaining high,
;        : the data line to go high.
                    #spauto

I2C_Stop            proc
                    !jsr      ?DataLow            ;data line starts low
                    @?delay                       ;optional extra delay (is it needed?)
                    !jsr      ?ClkHigh            ;while clock is high...
                    @?delay                       ;optional extra delay
                    !jsr      ?DataHigh           ;... data line goes from low to high
                    @?delay                       ;optional extra delay
                    rtc

;*******************************************************************************
; Purpose: Send a byte to the I2C device
; Input  : A = data byte
; Output : CCR[C] = 0 on acknowledge, 1 on not acknowledge
; Note(s):
                    #spauto

I2C_PutChar         proc
                    pshxa

                    ldx       #8                  ;numbers of bits to send
Loop@@              rola                          ;get data-bit (MSB) into Carry
                    bcs       OneBit@@            ;and put it to data-line

                    bsr       ?DataLow            ;a ZERO bit
                    bra       Clock@@             ;CLOCK LOW PERIOD (15/18 cycles)

OneBit@@            bsr       ?DataHigh           ;a ONE bit
                    brn       *                   ;(optional) for timing symmetry of 0 & 1 cases

Clock@@             bsr       ?ClkHighSync        ;set clock-line to '1' and wait for slave to be ready
                    @?delay                       ;optional extra delay
                    bsr       ?ClkLow             ;set clock-line to '0'
                    @?delay                       ;optional extra delay
                    dbnzx     Loop@@              ;one less bit to send

                    pulxa                         ;restore user registers
          ;-------------------------------------- ;get the acknowledge bit
                    @Input    I2C_DATA            ;input for receipt of acknowledge
                    bsr       ?ClkHighSync        ;set clock-line to '1' and wait for slave to be ready
                    @?delay                       ;optional extra delay (is it needed after clock sync?)
                    @ReadPin  I2C_DATA            ;acknowledge? (bit = 0)
                    bsr       ?ClkLow             ;set clock-line to '0'
                    @?delay
          ;--------------------------------------
                    rtc

;*******************************************************************************
; Purpose: Get a data byte from the IIC device in RegA
; Input  : CCR[C] = acknowledge (use 0 for all bytes except final byte to receive)
; Output : A = byte received
;        : CCR[C] = 0 -- for multiple I2C_GetChar calling convenience
; Note(s):
                    #spauto

I2C_GetChar         proc
                    lda       #1                  ;start with end-of-byte flag
                    psha      ans@@               ;placeholder for answer

                    tpa
                    psha

                    @Input    I2C_DATA            ;release IIC data line

Loop@@              !jsr      ?ClkHighSync        ;set clock-line to '1' wait for slave to be ready
                    @?delay                       ;optional extra delay
                    @ReadPin  I2C_DATA            ;adjust Carry according to Data bit
                    bsr       ?ClkLow             ;set clock-line to '0'
                    @?delay                       ;optional extra delay
                    rol       ans@@,sp            ;shift-in just read data-bit
                    bcc       Loop@@              ;repeat until flag comes out

                    pula
                    tap                           ;load caller's CCR[C]
          ;-------------------------------------- ;set the ack/nak bit based on CCR[C]
                    bsr       ?DataLow            ;put a '0' on the data line (ACK)
                    bcc       PutAck@@
                    bsr       ?DataHigh           ;put a '1' on the data line (NACK)

PutAck@@            bsr       ?ClkHighSync        ;set clock-line to '1' and wait for slave to be ready
                    @?delay                       ;optional extra delay
                    bsr       ?ClkLow             ;set clock-line to '0'
                    @Input    I2C_DATA            ;leave data line as input (high due to pullup)
                    @?delay                       ;optional extra delay
          ;--------------------------------------
                    pula                          ;A = received byte
                    clc                           ;(for convenience when calling multiple times)
                    rtc

;*******************************************************************************

I2C_Init            equ       :AnRTC              ;for compatibility with other i2c_polled.sub library

;*******************************************************************************
; Purpose: Set the clock line high
; Input  : None
; Output : None
; Note(s): Make sure CCR[C] is preserved

                    #spauto

?ClkHigh            proc
                    @Input    I2C_CLK             ;output a one (open-drain)
                    rts

;*******************************************************************************
; Purpose: Set the clock line low
; Input  : None
; Output : None
; Note(s): Make sure CCR[C] is preserved

                    #spauto

?ClkLow             proc
                    @Off      I2C_CLK             ;output a zero
                    rts

;*******************************************************************************
; Purpose: Set the data line high
; Input  : None
; Output : None
; Note(s): Make sure CCR[C] is preserved

                    #spauto

?DataHigh           proc
                    @Input    I2C_DATA            ;output a one (open-drain)
                    rts

;*******************************************************************************
; Purpose: Set the data line low
; Input  : None
; Output : None
; Note(s): Make sure CCR[C] is preserved

                    #spauto

?DataLow            proc
                    @Off      I2C_DATA            ;output a zero
                    rts

;*******************************************************************************
; Purpose: Set the clock line high and wait for slave to be ready by syncing
;        : clock speeds (clock stretching)
; Input  : None
; Output : None
; Note(s):
                    #spauto

?ClkHighSync        proc
                    bsr       ?ClkHigh
Loop@@
          #ifdef _MTOS_
                    @fNextTask
          #else
                    @cop
          #endif
                    brclr     I2C_CLK,Loop@@      ;wait for slave to be ready
                    rts

                    #sp
;*******************************************************************************
                    #Exit
;*******************************************************************************
                    @EndStats
